/* Generated by opensource COBOL 4J 1.1.2 */
import java.io.UnsupportedEncodingException;
import jp.osscons.opensourcecobol.libcobj.*;
import jp.osscons.opensourcecobol.libcobj.common.*;
import jp.osscons.opensourcecobol.libcobj.data.*;
import jp.osscons.opensourcecobol.libcobj.exceptions.*;
import jp.osscons.opensourcecobol.libcobj.termio.*;
import jp.osscons.opensourcecobol.libcobj.call.*;
import jp.osscons.opensourcecobol.libcobj.file.*;
import jp.osscons.opensourcecobol.libcobj.ui.*;
import java.util.Optional;
import java.lang.NullPointerException;
import java.lang.IndexOutOfBoundsException;

public class INSERTTBL implements CobolRunnable {

  private boolean initialized = false;
  private CobolModule module;
  private int entry;

  private CobolRunnable cob_unifunc;


  @Override
  public int run(CobolDataStorage... argStorages) {
    return INSERTTBL_(0, argStorages);
  }

  @Override
  public void cancel() {
    INSERTTBL_(-1);
  }

  @Override
  public boolean isActive() {
    return false;
  }

  public CobolResultSet execute () {
    int returnCode = run_module(0);
    return new CobolResultSet(returnCode);
  }

  public int INSERTTBL_ (int entry, CobolDataStorage ...argStorages) {
    this.entry = entry;
    return this.run_module(entry);
  }

  int run_module (int entry) {
    this.module = new CobolModule(null, null, null, null, 0, '.', '$', ',', 1, 1, 1, 0, null );

    /* Start of function code */

    /* CANCEL callback handling */
    if (entry < 0) {
    	if (!this.initialized) {
    		CobolDecimal.cobInitNumeric();
    		return 0;
    	}
    	this.initialized = false;
    	return 0;
    }

    /* Push module stack */
    CobolModule.push (module);

    /* Initialize program */
    if (!this.initialized) {
      module.setProgramId("INSERTTBL");

      b_RETURN_CODE.set((int)0);
      b_WORK$9__TEST_DATA.setBytes (str_0_0001HOKKAI, 28);

      b_WORK$10__TEST_DATA.setBytes (str_1_0002AOMORI, 28);

      b_WORK$11__TEST_DATA.setBytes (str_2_0003AKITA, 28);

      b_WORK$12__TEST_DATA.setBytes (str_3_0004IWATE, 28);

      b_WORK$13__TEST_DATA.setBytes (str_4_0005MIYAGI, 28);

      b_WORK$14__TEST_DATA.setBytes (str_5_0006FUKUSHIMA, 28);

      b_WORK$15__TEST_DATA.setBytes (str_6_0007TOCHIGI, 28);

      b_WORK$16__TEST_DATA.setBytes (str_7_0008IBARAKI, 28);

      b_WORK$17__TEST_DATA.setBytes (str_8_0009GUMMA, 28);

      b_WORK$18__TEST_DATA.setBytes (str_9_0010SAITAMA, 28);

      b_IDX.fillBytes('0', 2);
      b_SYS_TIME.fillBytes('0', 8);
      b_DBNAME.fillBytes (32, 30);
      b_USERNAME.fillBytes (32, 30);
      b_PASSWD.fillBytes (32, 10);
      b_EMP_NO__EMP_REC_VARS.fillBytes (48, 4);

      b_EMP_NAME__EMP_REC_VARS.fillBytes(' ', 20);
      b_EMP_SALARY__EMP_REC_VARS.fillBytes (48, 4);

      b_SQLCAID__SQLCA.fillBytes(' ', 8);
      b_SQLCABC__SQLCA.fillBytes(0, 8);
      b_SQLERRML__SQLERRM__SQLCA.fillBytes(0, 2);
      b_SQLERRMC__SQLERRM__SQLCA.fillBytes(' ', 70);

      b_SQLERRP__SQLCA.fillBytes(' ', 8);
      b_SQLERRD__SQLCA.getSubDataStorage(4 * 0).fillBytes(0, 24);
      b_SQLWARN__SQLCA.fillBytes(' ', 13);
      b_WORK$19__SQ0001.setBytes (str_10_DROP, 24);

      b_WORK$20__SQ0001.setByte(0, 0);
      b_WORK$21__SQ0002.setBytes (str_11_CREATE, 135);

      b_WORK$22__SQ0002.setByte(0, 0);
      b_WORK$23__SQ0003.setBytes (str_12_INSERT, 53);

      b_WORK$24__SQ0003.setByte(0, 0);
      b_WORK$25__SQ0004.setBytes (str_13_INSERT, 52);

      b_WORK$26__SQ0004.setByte(0, 0);
      b_WORK$27__SQ0005.setBytes (str_14_INSERT, 34);

      b_WORK$28__SQ0005.setByte(0, 0);
      b_WORK$29__SQ0006.setBytes (str_15_DISCONNECT, 14);

      b_WORK$30__SQ0006.setByte(0, 0);
      this.initialized = true;
    }
    /* PROCEDURE DIVISION */
    try{
      CobolStopRunException.dummy();
      CobolGoBackException.dummy();
      /* Entry dispatch */
      execEntry(l_INSERTTBL);

    } catch(CobolGoBackException e) {
      return e.getReturnCode();
    } catch(CobolStopRunException e) {
      CobolStopRunException.stopRun();
      System.exit(e.getReturnCode());
    }
    /* Pop module stack */
    CobolModule.pop();

    /* Program return */
    return b_RETURN_CODE.intValue();
  }
  public CobolControl[] contList = {
    new CobolControl(0, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {

        return Optional.of(contList[l_INSERTTBL]);
      }
    },
    /* Entry INSERTTBL */
    new CobolControl(l_INSERTTBL, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {

        return Optional.of(contList[l_MAIN_SECTION]);
      }
    },
    /* MAIN SECTION */
    new CobolControl(l_MAIN_SECTION, CobolControl.LabelType.section) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {

        return Optional.of(contList[l_MAIN_SECTION__MAIN_RTN]);
      }
    },
    /* MAIN-RTN */
    new CobolControl(l_MAIN_SECTION__MAIN_RTN, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {
        /* INSERTTBL.cob:111: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_1);
        }
        /* INSERTTBL.cob:117: MOVE */
        {
          f_DBNAME.moveFrom (c_2_testdb);
        }
        /* INSERTTBL.cob:118: MOVE */
        {
          f_USERNAME.moveFrom (c_3_test_user);
        }
        /* INSERTTBL.cob:119: MOVE */
        {
          b_PASSWD.setBytes (str_16_test, 10);
        }
        /* INSERTTBL.cob:123: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA, f_USERNAME, c_4_30, f_PASSWD, c_5_10, f_DBNAME, c_4_30);
          CobolCallParams.callParams = 7;
          call_OCESQLConnect = CobolResolve.resolve(null, "OCESQLConnect", call_OCESQLConnect);
          b_RETURN_CODE.set (call_OCESQLConnect.run (b_SQLCA, b_USERNAME, CobolDataStorage.primitiveToDataStorage(30), b_PASSWD, CobolDataStorage.primitiveToDataStorage(10), b_DBNAME, CobolDataStorage.primitiveToDataStorage(30)));
        }
        /* INSERTTBL.cob:132: IF */
        {
          if (((long)b_SQLCODE__SQLCA.cmpS32Binary (0) != 0L))
            {
              /* INSERTTBL.cob:132: PERFORM */
              /* PERFORM ERROR-RTN */
              CobolControl.perform(contList, l_MAIN_SECTION__ERROR_RTN).run();
              /* INSERTTBL.cob:132: STOP */
              {
                CobolStopRunException.throwException (b_RETURN_CODE.intValue());
              }
            }
        }
        /* INSERTTBL.cob:133: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_6_CONNECT);
        }
        /* INSERTTBL.cob:139: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA, f_SQ0001);
          CobolCallParams.callParams = 2;
          call_OCESQLExec = CobolResolve.resolve(null, "OCESQLExec", call_OCESQLExec);
          b_RETURN_CODE.set (call_OCESQLExec.run (b_SQLCA, b_SQ0001));
        }
        /* INSERTTBL.cob:143: IF */
        {
          if (((long)b_SQLCODE__SQLCA.cmpS32Binary (0) != 0L))
            {
              /* INSERTTBL.cob:143: PERFORM */
              /* PERFORM ERROR-RTN */
              CobolControl.perform(contList, l_MAIN_SECTION__ERROR_RTN).run();
            }
        }
        /* INSERTTBL.cob:144: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_7_DROP);
        }
        /* INSERTTBL.cob:156: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA, f_SQ0002);
          CobolCallParams.callParams = 2;
          call_OCESQLExec = CobolResolve.resolve(null, "OCESQLExec", call_OCESQLExec);
          b_RETURN_CODE.set (call_OCESQLExec.run (b_SQLCA, b_SQ0002));
        }
        /* INSERTTBL.cob:160: IF */
        {
          if (((long)b_SQLCODE__SQLCA.cmpS32Binary (0) != 0L))
            {
              /* INSERTTBL.cob:160: PERFORM */
              /* PERFORM ERROR-RTN */
              CobolControl.perform(contList, l_MAIN_SECTION__ERROR_RTN).run();
              /* INSERTTBL.cob:160: STOP */
              {
                CobolStopRunException.throwException (b_RETURN_CODE.intValue());
              }
            }
        }
        /* INSERTTBL.cob:161: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_8_CREATE);
        }
        /* INSERTTBL.cob:168: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA, f_SQ0003);
          CobolCallParams.callParams = 2;
          call_OCESQLExec = CobolResolve.resolve(null, "OCESQLExec", call_OCESQLExec);
          b_RETURN_CODE.set (call_OCESQLExec.run (b_SQLCA, b_SQ0003));
        }
        /* INSERTTBL.cob:172: IF */
        {
          if (((long)b_SQLCODE__SQLCA.cmpS32Binary (0) != 0L))
            {
              /* INSERTTBL.cob:172: PERFORM */
              /* PERFORM ERROR-RTN */
              CobolControl.perform(contList, l_MAIN_SECTION__ERROR_RTN).run();
            }
        }
        /* INSERTTBL.cob:173: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_9_INSERT);
        }
        /* INSERTTBL.cob:179: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA, f_SQ0004);
          CobolCallParams.callParams = 2;
          call_OCESQLExec = CobolResolve.resolve(null, "OCESQLExec", call_OCESQLExec);
          b_RETURN_CODE.set (call_OCESQLExec.run (b_SQLCA, b_SQ0004));
        }
        /* INSERTTBL.cob:183: IF */
        {
          if (((long)b_SQLCODE__SQLCA.cmpS32Binary (0) != 0L))
            {
              /* INSERTTBL.cob:183: PERFORM */
              /* PERFORM ERROR-RTN */
              CobolControl.perform(contList, l_MAIN_SECTION__ERROR_RTN).run();
            }
        }
        /* INSERTTBL.cob:184: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_9_INSERT);
        }
        /* INSERTTBL.cob:187: PERFORM */
        b_IDX.setBytes (str_17_01, 2);
        for(;;f_IDX.addInt (1))
          {
            if (((long)b_IDX.cmpNumdisp (2, 10) >  0L))
              break;
            {
              /* INSERTTBL.cob:188: MOVE */
              {
                b_EMP_NO__EMP_REC_VARS.setBytes (b_TEST_NO__TEST_TBL__TEST_DATA_R.getSubDataStorage(28 * (b_IDX.getNumdisp(2) - 1)), 4);
              }
              /* INSERTTBL.cob:189: MOVE */
              {
                b_EMP_NAME__EMP_REC_VARS.setBytes (b_TEST_NAME__TEST_TBL__TEST_DATA_R.getSubDataStorage(28 * (b_IDX.getNumdisp(2) - 1)), 20);
              }
              /* INSERTTBL.cob:190: MOVE */
              {
                b_EMP_SALARY__EMP_REC_VARS.setBytes (b_TEST_SALARY__TEST_TBL__TEST_DATA_R.getSubDataStorage(28 * (b_IDX.getNumdisp(2) - 1)), 4);
              }
              /* INSERTTBL.cob:192: DISPLAY */
              {
                CobolTerminal.display (0, 1, 6, c_10_Inserting, f_EMP_NO__EMP_REC_VARS, c_11, f_EMP_NAME__EMP_REC_VARS, c_11, f_EMP_SALARY__EMP_REC_VARS);
              }
              /* INSERTTBL.cob:198: CALL */
              {
                CobolModule.getCurrentModule ().setParameters ();
                CobolCallParams.callParams = 0;
                call_OCESQLStartSQL = CobolResolve.resolve(null, "OCESQLStartSQL", call_OCESQLStartSQL);
                b_RETURN_CODE.set (call_OCESQLStartSQL.run ());
              }
              /* INSERTTBL.cob:200: CALL */
              {
                CobolModule.getCurrentModule ().setParameters (c_12_3, c_13_4, c_14_0, f_EMP_NO__EMP_REC_VARS);
                CobolCallParams.callParams = 4;
                call_OCESQLSetSQLParams = CobolResolve.resolve(null, "OCESQLSetSQLParams", call_OCESQLSetSQLParams);
                b_RETURN_CODE.set (call_OCESQLSetSQLParams.run (CobolDataStorage.primitiveToDataStorage(3), CobolDataStorage.primitiveToDataStorage(4), CobolDataStorage.primitiveToDataStorage(0), b_EMP_NO__EMP_REC_VARS));
              }
              /* INSERTTBL.cob:206: CALL */
              {
                CobolModule.getCurrentModule ().setParameters (c_15_16, c_16_20, c_14_0, f_EMP_NAME__EMP_REC_VARS);
                CobolCallParams.callParams = 4;
                call_OCESQLSetSQLParams = CobolResolve.resolve(null, "OCESQLSetSQLParams", call_OCESQLSetSQLParams);
                b_RETURN_CODE.set (call_OCESQLSetSQLParams.run (CobolDataStorage.primitiveToDataStorage(16), CobolDataStorage.primitiveToDataStorage(20), CobolDataStorage.primitiveToDataStorage(0), b_EMP_NAME__EMP_REC_VARS));
              }
              /* INSERTTBL.cob:212: CALL */
              {
                CobolModule.getCurrentModule ().setParameters (c_12_3, c_13_4, c_14_0, f_EMP_SALARY__EMP_REC_VARS);
                CobolCallParams.callParams = 4;
                call_OCESQLSetSQLParams = CobolResolve.resolve(null, "OCESQLSetSQLParams", call_OCESQLSetSQLParams);
                b_RETURN_CODE.set (call_OCESQLSetSQLParams.run (CobolDataStorage.primitiveToDataStorage(3), CobolDataStorage.primitiveToDataStorage(4), CobolDataStorage.primitiveToDataStorage(0), b_EMP_SALARY__EMP_REC_VARS));
              }
              /* INSERTTBL.cob:218: CALL */
              {
                CobolModule.getCurrentModule ().setParameters (f_SQLCA, f_SQ0005, c_12_3);
                CobolCallParams.callParams = 3;
                call_OCESQLExecParams = CobolResolve.resolve(null, "OCESQLExecParams", call_OCESQLExecParams);
                b_RETURN_CODE.set (call_OCESQLExecParams.run (b_SQLCA, b_SQ0005, CobolDataStorage.primitiveToDataStorage(3)));
              }
              /* INSERTTBL.cob:223: CALL */
              {
                CobolModule.getCurrentModule ().setParameters ();
                CobolCallParams.callParams = 0;
                call_OCESQLEndSQL = CobolResolve.resolve(null, "OCESQLEndSQL", call_OCESQLEndSQL);
                b_RETURN_CODE.set (call_OCESQLEndSQL.run ());
              }
              /* INSERTTBL.cob:225: IF */
              {
                if (((long)b_SQLCODE__SQLCA.cmpS32Binary (0) != 0L))
                  {
                    /* INSERTTBL.cob:226: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 1, c_17_INSERT);
                    }
                    /* INSERTTBL.cob:227: PERFORM */
                    /* PERFORM ERROR-RTN */
                    CobolControl.perform(contList, l_MAIN_SECTION__ERROR_RTN).run();
                    /* INSERTTBL.cob:228: EXIT */
                    {
                      if(true) break;
                    }
                  }
                else
                  {
                    /* INSERTTBL.cob:231: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 1, c_18_INSERT);
                    }
                  }
              }
            }
          }
        /* INSERTTBL.cob:238: CALL */
        {
          CobolModule.getCurrentModule ().setParameters ();
          CobolCallParams.callParams = 0;
          call_OCESQLStartSQL = CobolResolve.resolve(null, "OCESQLStartSQL", call_OCESQLStartSQL);
          b_RETURN_CODE.set (call_OCESQLStartSQL.run ());
        }
        /* INSERTTBL.cob:240: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA, c_19_COMMIT);
          CobolCallParams.callParams = 2;
          call_OCESQLExec = CobolResolve.resolve(null, "OCESQLExec", call_OCESQLExec);
          b_RETURN_CODE.set (call_OCESQLExec.run (b_SQLCA, str_18_COMMIT));
        }
        /* INSERTTBL.cob:244: CALL */
        {
          CobolModule.getCurrentModule ().setParameters ();
          CobolCallParams.callParams = 0;
          call_OCESQLEndSQL = CobolResolve.resolve(null, "OCESQLEndSQL", call_OCESQLEndSQL);
          b_RETURN_CODE.set (call_OCESQLEndSQL.run ());
        }
        /* INSERTTBL.cob:251: CALL */
        {
          CobolModule.getCurrentModule ().setParameters (f_SQLCA);
          CobolCallParams.callParams = 1;
          call_OCESQLDisconnect = CobolResolve.resolve(null, "OCESQLDisconnect", call_OCESQLDisconnect);
          b_RETURN_CODE.set (call_OCESQLDisconnect.run (b_SQLCA));
        }
        /* INSERTTBL.cob:256: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_20);
        }
        /* INSERTTBL.cob:257: STOP */
        {
          CobolStopRunException.throwException (b_RETURN_CODE.intValue());
        }

        return Optional.of(contList[l_MAIN_SECTION__ERROR_RTN]);
      }
    },
    /* ERROR-RTN */
    new CobolControl(l_MAIN_SECTION__ERROR_RTN, CobolControl.LabelType.label) {
      public Optional<CobolControl> run() throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {
        /* INSERTTBL.cob:262: DISPLAY */
        {
          CobolTerminal.display (0, 1, 1, c_21);
        }
        /* INSERTTBL.cob:263: DISPLAY */
        {
          CobolTerminal.display (0, 0, 3, c_22_SQLCODE, f_SQLCODE__SQLCA, c_11);
        }
        /* INSERTTBL.cob:264: EVALUATE */
        {
          if (((long)b_SQLCODE__SQLCA.cmpS32Binary (10) == 0L))
            {
              /* INSERTTBL.cob:266: DISPLAY */
              {
                CobolTerminal.display (0, 1, 1, c_23_Record);
              }
            }
          else
            if (((long)b_SQLCODE__SQLCA.cmpS32Binary (-1) == 0L))
              {
                /* INSERTTBL.cob:268: DISPLAY */
                {
                  CobolTerminal.display (0, 1, 1, c_24_Connection);
                }
              }
            else
              if (((long)b_SQLCODE__SQLCA.cmpS32Binary (-20) == 0L))
                {
                  /* INSERTTBL.cob:270: DISPLAY */
                  {
                    CobolTerminal.display (0, 1, 1, c_25_Internal);
                  }
                }
              else
                if (((long)b_SQLCODE__SQLCA.cmpS32Binary (-30) == 0L))
                  {
                    /* INSERTTBL.cob:272: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 1, c_26_PostgreSQL);
                    }
                    /* INSERTTBL.cob:273: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 2, c_27_ERRCODE, f_SQLSTATE__SQLCA);
                    }
                    /* INSERTTBL.cob:274: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 1, f_SQLERRMC__SQLERRM__SQLCA);
                    }
                    /* INSERTTBL.cob:279: CALL */
                    {
                      CobolModule.getCurrentModule ().setParameters ();
                      CobolCallParams.callParams = 0;
                      call_OCESQLStartSQL = CobolResolve.resolve(null, "OCESQLStartSQL", call_OCESQLStartSQL);
                      b_RETURN_CODE.set (call_OCESQLStartSQL.run ());
                    }
                    /* INSERTTBL.cob:281: CALL */
                    {
                      CobolModule.getCurrentModule ().setParameters (f_SQLCA, c_28_ROLLBACK);
                      CobolCallParams.callParams = 2;
                      call_OCESQLExec = CobolResolve.resolve(null, "OCESQLExec", call_OCESQLExec);
                      b_RETURN_CODE.set (call_OCESQLExec.run (b_SQLCA, str_19_ROLLBACK));
                    }
                    /* INSERTTBL.cob:285: CALL */
                    {
                      CobolModule.getCurrentModule ().setParameters ();
                      CobolCallParams.callParams = 0;
                      call_OCESQLEndSQL = CobolResolve.resolve(null, "OCESQLEndSQL", call_OCESQLEndSQL);
                      b_RETURN_CODE.set (call_OCESQLEndSQL.run ());
                    }
                  }
                else
                  {
                    /* INSERTTBL.cob:288: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 1, c_29_Undefined);
                    }
                    /* INSERTTBL.cob:289: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 2, c_27_ERRCODE, f_SQLSTATE__SQLCA);
                    }
                    /* INSERTTBL.cob:290: DISPLAY */
                    {
                      CobolTerminal.display (0, 1, 1, f_SQLERRMC__SQLERRM__SQLCA);
                    }
                  }
        }
        return Optional.of(CobolControl.pure());
      }
    },
    CobolControl.pure()
  };
  public void execEntry(int start) throws CobolRuntimeException, CobolGoBackException, CobolStopRunException {
    Optional<CobolControl> nextLabel = Optional.of(contList[start]);
    while(nextLabel.isPresent()) {
      CobolControl section = nextLabel.get();
      nextLabel = section.run();
    }
  }

  public static void main(String[] args)
  {
    CobolUtil.cob_init(args, false);
    CobolDecimal.cobInitNumeric();
    new INSERTTBL().INSERTTBL_(0);
    CobolStopRunException.stopRun();
  }

  public INSERTTBL()
  {
    init();
  }

  public void init() 
  {
    try {
      /* Data storage */

      cob_unifunc = null;

      /* PROGRAM-ID : INSERTTBL */
      b_RETURN_CODE = new CobolDataStorage(4);	/* RETURN-CODE */
      b_TEST_DATA = new CobolDataStorage(280);	/* TEST-DATA */
      b_IDX = new CobolDataStorage(2);	/* IDX */
      b_SYS_TIME = new CobolDataStorage(8);	/* SYS-TIME */
      b_DBNAME = new CobolDataStorage(30);	/* DBNAME */
      b_USERNAME = new CobolDataStorage(30);	/* USERNAME */
      b_PASSWD = new CobolDataStorage(10);	/* PASSWD */
      b_EMP_REC_VARS = new CobolDataStorage(28);	/* EMP-REC-VARS */
      b_SQLCA = new CobolDataStorage(133);	/* SQLCA */
      b_SQ0001 = new CobolDataStorage(25);	/* SQ0001 */
      b_SQ0002 = new CobolDataStorage(136);	/* SQ0002 */
      b_SQ0003 = new CobolDataStorage(54);	/* SQ0003 */
      b_SQ0004 = new CobolDataStorage(53);	/* SQ0004 */
      b_SQ0005 = new CobolDataStorage(35);	/* SQ0005 */
      b_SQ0006 = new CobolDataStorage(15);	/* SQ0006 */
      b_EMP_NAME__EMP_REC_VARS = b_EMP_REC_VARS.getSubDataStorage(4);
      b_EMP_NO__EMP_REC_VARS = b_EMP_REC_VARS;
      b_EMP_SALARY__EMP_REC_VARS = b_EMP_REC_VARS.getSubDataStorage(24);
      b_WORK$19__SQ0001 = b_SQ0001;
      b_WORK$20__SQ0001 = b_SQ0001.getSubDataStorage(24);
      b_WORK$21__SQ0002 = b_SQ0002;
      b_WORK$22__SQ0002 = b_SQ0002.getSubDataStorage(135);
      b_WORK$23__SQ0003 = b_SQ0003;
      b_WORK$24__SQ0003 = b_SQ0003.getSubDataStorage(53);
      b_WORK$25__SQ0004 = b_SQ0004;
      b_WORK$26__SQ0004 = b_SQ0004.getSubDataStorage(52);
      b_WORK$27__SQ0005 = b_SQ0005;
      b_WORK$28__SQ0005 = b_SQ0005.getSubDataStorage(34);
      b_WORK$29__SQ0006 = b_SQ0006;
      b_WORK$30__SQ0006 = b_SQ0006.getSubDataStorage(14);
      b_SQLCABC__SQLCA = b_SQLCA.getSubDataStorage(8);
      b_SQLCAID__SQLCA = b_SQLCA;
      b_SQLCODE__SQLCA = b_SQLCA.getSubDataStorage(12);
      b_SQLERRD__SQLCA = b_SQLCA.getSubDataStorage(96);
      b_SQLERRMC__SQLERRM__SQLCA = b_SQLCA.getSubDataStorage(18);
      b_SQLERRML__SQLERRM__SQLCA = b_SQLCA.getSubDataStorage(16);
      b_SQLERRP__SQLCA = b_SQLCA.getSubDataStorage(88);
      b_SQLSTATE__SQLCA = b_SQLCA.getSubDataStorage(128);
      b_SQLWARN__SQLCA = b_SQLCA.getSubDataStorage(120);
      b_TEST_NAME__TEST_TBL__TEST_DATA_R = b_TEST_DATA.getSubDataStorage(4);
      b_TEST_NO__TEST_TBL__TEST_DATA_R = b_TEST_DATA;
      b_TEST_SALARY__TEST_TBL__TEST_DATA_R = b_TEST_DATA.getSubDataStorage(24);
      b_WORK$10__TEST_DATA = b_TEST_DATA.getSubDataStorage(28);
      b_WORK$11__TEST_DATA = b_TEST_DATA.getSubDataStorage(56);
      b_WORK$12__TEST_DATA = b_TEST_DATA.getSubDataStorage(84);
      b_WORK$13__TEST_DATA = b_TEST_DATA.getSubDataStorage(112);
      b_WORK$14__TEST_DATA = b_TEST_DATA.getSubDataStorage(140);
      b_WORK$15__TEST_DATA = b_TEST_DATA.getSubDataStorage(168);
      b_WORK$16__TEST_DATA = b_TEST_DATA.getSubDataStorage(196);
      b_WORK$17__TEST_DATA = b_TEST_DATA.getSubDataStorage(224);
      b_WORK$18__TEST_DATA = b_TEST_DATA.getSubDataStorage(252);
      b_WORK$9__TEST_DATA = b_TEST_DATA;

      /* End of data storage */


      initAttr();

      /* Fields */

      /* PROGRAM-ID : INSERTTBL */
      f_IDX	= CobolFieldFactory.makeCobolField(2, b_IDX, a_3);	/* IDX */
      f_DBNAME	= CobolFieldFactory.makeCobolField(30, b_DBNAME, a_1);	/* DBNAME */
      f_USERNAME	= CobolFieldFactory.makeCobolField(30, b_USERNAME, a_1);	/* USERNAME */
      f_PASSWD	= CobolFieldFactory.makeCobolField(10, b_PASSWD, a_1);	/* PASSWD */
      f_EMP_NO__EMP_REC_VARS	= CobolFieldFactory.makeCobolField(4, b_EMP_NO__EMP_REC_VARS, a_4);	/* EMP-NO */
      f_EMP_NAME__EMP_REC_VARS	= CobolFieldFactory.makeCobolField(20, b_EMP_NAME__EMP_REC_VARS, a_1);	/* EMP-NAME */
      f_EMP_SALARY__EMP_REC_VARS	= CobolFieldFactory.makeCobolField(4, b_EMP_SALARY__EMP_REC_VARS, a_4);	/* EMP-SALARY */
      f_SQLCA	= CobolFieldFactory.makeCobolField(133, b_SQLCA, a_2);	/* SQLCA */
      f_SQLCODE__SQLCA	= CobolFieldFactory.makeCobolField(4, b_SQLCODE__SQLCA, a_5);	/* SQLCODE */
      f_SQLERRMC__SQLERRM__SQLCA	= CobolFieldFactory.makeCobolField(70, b_SQLERRMC__SQLERRM__SQLCA, a_1);	/* SQLERRMC */
      f_SQLSTATE__SQLCA	= CobolFieldFactory.makeCobolField(5, b_SQLSTATE__SQLCA, a_1);	/* SQLSTATE */
      f_SQ0001	= CobolFieldFactory.makeCobolField(25, b_SQ0001, a_2);	/* SQ0001 */
      f_SQ0002	= CobolFieldFactory.makeCobolField(136, b_SQ0002, a_2);	/* SQ0002 */
      f_SQ0003	= CobolFieldFactory.makeCobolField(54, b_SQ0003, a_2);	/* SQ0003 */
      f_SQ0004	= CobolFieldFactory.makeCobolField(53, b_SQ0004, a_2);	/* SQ0004 */
      f_SQ0005	= CobolFieldFactory.makeCobolField(35, b_SQ0005, a_2);	/* SQ0005 */

      /* End of fields */


      /* Constants */

      c_1	= CobolFieldFactory.makeCobolField(25, str_20, a_1);
      c_2_testdb	= CobolFieldFactory.makeCobolField(6, str_21_testdb, a_1);
      c_3_test_user	= CobolFieldFactory.makeCobolField(9, str_22_test_user, a_1);
      c_4_30	= CobolFieldFactory.makeCobolField(2, "30", a_3);
      c_5_10	= CobolFieldFactory.makeCobolField(2, "10", a_3);
      c_6_CONNECT	= CobolFieldFactory.makeCobolField(12, str_23_CONNECT, a_1);
      c_7_DROP	= CobolFieldFactory.makeCobolField(9, str_24_DROP, a_1);
      c_8_CREATE	= CobolFieldFactory.makeCobolField(17, str_25_CREATE, a_1);
      c_9_INSERT	= CobolFieldFactory.makeCobolField(30, str_26_INSERT, a_1);
      c_10_Inserting	= CobolFieldFactory.makeCobolField(11, str_27_Inserting, a_1);
      c_11	= CobolFieldFactory.makeCobolField(1, str_28, a_1);
      c_12_3	= CobolFieldFactory.makeCobolField(1, "3", a_6);
      c_13_4	= CobolFieldFactory.makeCobolField(1, "4", a_6);
      c_14_0	= CobolFieldFactory.makeCobolField(1, "0", a_6);
      c_15_16	= CobolFieldFactory.makeCobolField(2, "16", a_3);
      c_16_20	= CobolFieldFactory.makeCobolField(2, "20", a_3);
      c_17_INSERT	= CobolFieldFactory.makeCobolField(39, str_29_INSERT, a_1);
      c_18_INSERT	= CobolFieldFactory.makeCobolField(36, str_30_INSERT, a_1);
      c_19_COMMIT	= CobolFieldFactory.makeCobolField(7, str_31_COMMIT, a_1);
      c_20	= CobolFieldFactory.makeCobolField(26, str_32, a_1);
      c_21	= CobolFieldFactory.makeCobolField(17, str_33, a_1);
      c_22_SQLCODE	= CobolFieldFactory.makeCobolField(9, str_34_SQLCODE, a_1);
      c_23_Record	= CobolFieldFactory.makeCobolField(16, str_35_Record, a_1);
      c_24_Connection	= CobolFieldFactory.makeCobolField(17, str_36_Connection, a_1);
      c_25_Internal	= CobolFieldFactory.makeCobolField(14, str_37_Internal, a_1);
      c_26_PostgreSQL	= CobolFieldFactory.makeCobolField(16, str_38_PostgreSQL, a_1);
      c_27_ERRCODE	= CobolFieldFactory.makeCobolField(9, str_39_ERRCODE, a_1);
      c_28_ROLLBACK	= CobolFieldFactory.makeCobolField(9, str_40_ROLLBACK, a_1);
      c_29_Undefined	= CobolFieldFactory.makeCobolField(15, str_41_Undefined, a_1);

    } catch(NullPointerException e) {
      System.out.println("Error - NullpointerException");
    } catch(IndexOutOfBoundsException e) {
      System.out.println("Error - IndexOutOfBoundsException");
    }
  }

  private void initAttr() {
    /* Attributes */

    a_1 = new CobolFieldAttribute (33, 0, 0, 0, null);
    a_2 = new CobolFieldAttribute (1, 0, 0, 0, null);
    a_3 = new CobolFieldAttribute (16, 2, 0, 0, null);
    a_4 = new CobolFieldAttribute (16, 4, 0, 1, null);
    a_5 = new CobolFieldAttribute (17, 9, 0, 1, null);
    a_6 = new CobolFieldAttribute (16, 1, 0, 0, null);

  }

  /* Data storage */

  /* PROGRAM-ID : INSERTTBL */
  private CobolDataStorage b_RETURN_CODE;	/* RETURN-CODE */
  private CobolDataStorage b_TEST_DATA;	/* TEST-DATA */
  private CobolDataStorage b_IDX;	/* IDX */
  private CobolDataStorage b_SYS_TIME;	/* SYS-TIME */
  private CobolDataStorage b_DBNAME;	/* DBNAME */
  private CobolDataStorage b_USERNAME;	/* USERNAME */
  private CobolDataStorage b_PASSWD;	/* PASSWD */
  private CobolDataStorage b_EMP_REC_VARS;	/* EMP-REC-VARS */
  private CobolDataStorage b_SQLCA;	/* SQLCA */
  private CobolDataStorage b_SQ0001;	/* SQ0001 */
  private CobolDataStorage b_SQ0002;	/* SQ0002 */
  private CobolDataStorage b_SQ0003;	/* SQ0003 */
  private CobolDataStorage b_SQ0004;	/* SQ0004 */
  private CobolDataStorage b_SQ0005;	/* SQ0005 */
  private CobolDataStorage b_SQ0006;	/* SQ0006 */
  private CobolDataStorage b_EMP_NAME__EMP_REC_VARS;
  private CobolDataStorage b_EMP_NO__EMP_REC_VARS;
  private CobolDataStorage b_EMP_SALARY__EMP_REC_VARS;
  private CobolDataStorage b_WORK$19__SQ0001;
  private CobolDataStorage b_WORK$20__SQ0001;
  private CobolDataStorage b_WORK$21__SQ0002;
  private CobolDataStorage b_WORK$22__SQ0002;
  private CobolDataStorage b_WORK$23__SQ0003;
  private CobolDataStorage b_WORK$24__SQ0003;
  private CobolDataStorage b_WORK$25__SQ0004;
  private CobolDataStorage b_WORK$26__SQ0004;
  private CobolDataStorage b_WORK$27__SQ0005;
  private CobolDataStorage b_WORK$28__SQ0005;
  private CobolDataStorage b_WORK$29__SQ0006;
  private CobolDataStorage b_WORK$30__SQ0006;
  private CobolDataStorage b_SQLCABC__SQLCA;
  private CobolDataStorage b_SQLCAID__SQLCA;
  private CobolDataStorage b_SQLCODE__SQLCA;
  private CobolDataStorage b_SQLERRD__SQLCA;
  private CobolDataStorage b_SQLERRMC__SQLERRM__SQLCA;
  private CobolDataStorage b_SQLERRML__SQLERRM__SQLCA;
  private CobolDataStorage b_SQLERRP__SQLCA;
  private CobolDataStorage b_SQLSTATE__SQLCA;
  private CobolDataStorage b_SQLWARN__SQLCA;
  private CobolDataStorage b_TEST_NAME__TEST_TBL__TEST_DATA_R;
  private CobolDataStorage b_TEST_NO__TEST_TBL__TEST_DATA_R;
  private CobolDataStorage b_TEST_SALARY__TEST_TBL__TEST_DATA_R;
  private CobolDataStorage b_WORK$10__TEST_DATA;
  private CobolDataStorage b_WORK$11__TEST_DATA;
  private CobolDataStorage b_WORK$12__TEST_DATA;
  private CobolDataStorage b_WORK$13__TEST_DATA;
  private CobolDataStorage b_WORK$14__TEST_DATA;
  private CobolDataStorage b_WORK$15__TEST_DATA;
  private CobolDataStorage b_WORK$16__TEST_DATA;
  private CobolDataStorage b_WORK$17__TEST_DATA;
  private CobolDataStorage b_WORK$18__TEST_DATA;
  private CobolDataStorage b_WORK$9__TEST_DATA;

  /* End of data storage */


  /* Fields */

  /* PROGRAM-ID : INSERTTBL */
  private AbstractCobolField f_IDX;	/* IDX */
  private AbstractCobolField f_DBNAME;	/* DBNAME */
  private AbstractCobolField f_USERNAME;	/* USERNAME */
  private AbstractCobolField f_PASSWD;	/* PASSWD */
  private AbstractCobolField f_EMP_NO__EMP_REC_VARS;	/* EMP-NO */
  private AbstractCobolField f_EMP_NAME__EMP_REC_VARS;	/* EMP-NAME */
  private AbstractCobolField f_EMP_SALARY__EMP_REC_VARS;	/* EMP-SALARY */
  private AbstractCobolField f_SQLCA;	/* SQLCA */
  private AbstractCobolField f_SQLCODE__SQLCA;	/* SQLCODE */
  private AbstractCobolField f_SQLERRMC__SQLERRM__SQLCA;	/* SQLERRMC */
  private AbstractCobolField f_SQLSTATE__SQLCA;	/* SQLSTATE */
  private AbstractCobolField f_SQ0001;	/* SQ0001 */
  private AbstractCobolField f_SQ0002;	/* SQ0002 */
  private AbstractCobolField f_SQ0003;	/* SQ0003 */
  private AbstractCobolField f_SQ0004;	/* SQ0004 */
  private AbstractCobolField f_SQ0005;	/* SQ0005 */

  /* End of fields */


  private static AbstractCobolField f_native;

  /* Constants */

  private AbstractCobolField c_29_Undefined;
  private AbstractCobolField c_28_ROLLBACK;
  private AbstractCobolField c_27_ERRCODE;
  private AbstractCobolField c_26_PostgreSQL;
  private AbstractCobolField c_25_Internal;
  private AbstractCobolField c_24_Connection;
  private AbstractCobolField c_23_Record;
  private AbstractCobolField c_22_SQLCODE;
  private AbstractCobolField c_21;
  private AbstractCobolField c_20;
  private AbstractCobolField c_19_COMMIT;
  private AbstractCobolField c_18_INSERT;
  private AbstractCobolField c_17_INSERT;
  private AbstractCobolField c_16_20;
  private AbstractCobolField c_15_16;
  private AbstractCobolField c_14_0;
  private AbstractCobolField c_13_4;
  private AbstractCobolField c_12_3;
  private AbstractCobolField c_11;
  private AbstractCobolField c_10_Inserting;
  private AbstractCobolField c_9_INSERT;
  private AbstractCobolField c_8_CREATE;
  private AbstractCobolField c_7_DROP;
  private AbstractCobolField c_6_CONNECT;
  private AbstractCobolField c_5_10;
  private AbstractCobolField c_4_30;
  private AbstractCobolField c_3_test_user;
  private AbstractCobolField c_2_testdb;
  private AbstractCobolField c_1;

  /* Attributes */

  private CobolFieldAttribute a_6;
  private CobolFieldAttribute a_5;
  private CobolFieldAttribute a_4;
  private CobolFieldAttribute a_3;
  private CobolFieldAttribute a_2;
  private CobolFieldAttribute a_1;



  /* String literals */
  public static final byte[] str_41_Undefined = CobolUtil.stringToBytes("Undefined error");
  public static final byte[] str_40_ROLLBACK = CobolUtil.toBytes((byte)0x52, (byte)0x4f, (byte)0x4c, (byte)0x4c, (byte)0x42, (byte)0x41, (byte)0x43, (byte)0x4b, (byte)0x00);
  public static final byte[] str_39_ERRCODE = CobolUtil.stringToBytes("ERRCODE: ");
  public static final byte[] str_38_PostgreSQL = CobolUtil.stringToBytes("PostgreSQL error");
  public static final byte[] str_37_Internal = CobolUtil.stringToBytes("Internal error");
  public static final byte[] str_36_Connection = CobolUtil.stringToBytes("Connection falied");
  public static final byte[] str_35_Record = CobolUtil.stringToBytes("Record not found");
  public static final byte[] str_34_SQLCODE = CobolUtil.stringToBytes("SQLCODE: ");
  public static final byte[] str_33 = CobolUtil.stringToBytes("*** SQL ERROR ***");
  public static final byte[] str_32 = CobolUtil.stringToBytes("*** INSERTTBL FINISHED ***");
  public static final byte[] str_31_COMMIT = CobolUtil.toBytes((byte)0x43, (byte)0x4f, (byte)0x4d, (byte)0x4d, (byte)0x49, (byte)0x54, (byte)0x00);
  public static final byte[] str_30_INSERT = CobolUtil.stringToBytes("INSERT ROWS USING HOST VARIABLE...OK");
  public static final byte[] str_29_INSERT = CobolUtil.stringToBytes("INSERT ROWS USING HOST VARIABLE...ERROR");
  public static final byte[] str_28 = CobolUtil.stringToBytes(" ");
  public static final byte[] str_27_Inserting = CobolUtil.stringToBytes("Inserting: ");
  public static final byte[] str_26_INSERT = CobolUtil.stringToBytes("INSERT ROWS USING LITERAL...OK");
  public static final byte[] str_25_CREATE = CobolUtil.stringToBytes("CREATE TABLE...OK");
  public static final byte[] str_24_DROP = CobolUtil.stringToBytes("DROP...OK");
  public static final byte[] str_23_CONNECT = CobolUtil.stringToBytes("CONNECT...OK");
  public static final byte[] str_22_test_user = CobolUtil.stringToBytes("test_user");
  public static final byte[] str_21_testdb = CobolUtil.stringToBytes("testdb");
  public static final byte[] str_20 = CobolUtil.stringToBytes("*** INSERTTBL STARTED ***");
  public static final CobolDataStorage str_19_ROLLBACK = CobolDataStorage.makeCobolDataStorage((byte)0x52, (byte)0x4f, (byte)0x4c, (byte)0x4c, (byte)0x42, (byte)0x41, (byte)0x43, (byte)0x4b, (byte)0x00);
  public static final CobolDataStorage str_18_COMMIT = CobolDataStorage.makeCobolDataStorage((byte)0x43, (byte)0x4f, (byte)0x4d, (byte)0x4d, (byte)0x49, (byte)0x54, (byte)0x00);
  public static final byte[] str_17_01 = CobolUtil.stringToBytes("01");
  public static final byte[] str_16_test = CobolUtil.stringToBytes("test      ");
  public static final byte[] str_15_DISCONNECT = CobolUtil.stringToBytes("DISCONNECT ALL");
  public static final byte[] str_14_INSERT = CobolUtil.stringToBytes("INSERT INTO EMP VALUES ( ?, ?, ? )");
  public static final byte[] str_13_INSERT = CobolUtil.stringToBytes("INSERT INTO EMP VALUES (47, 'OKINAWA SHICHIRO', 480)");
  public static final byte[] str_12_INSERT = CobolUtil.stringToBytes("INSERT INTO EMP VALUES (46, 'KAGOSHIMA ROKURO', -320)");
  public static final byte[] str_11_CREATE = CobolUtil.stringToBytes("CREATE TABLE EMP ( EMP_NO NUMERIC(4, 0) NOT NULL, EMP_NAME CHAR(20), EMP_SALARY NUMERIC(4, 0), CONSTRAINT IEMP_0 PRIMARY KEY (EMP_NO) )");
  public static final byte[] str_10_DROP = CobolUtil.stringToBytes("DROP TABLE IF EXISTS EMP");
  public static final byte[] str_9_0010SAITAMA = CobolUtil.stringToBytes("0010SAITAMA JURO        0350");
  public static final byte[] str_8_0009GUMMA = CobolUtil.stringToBytes("0009GUMMA KURO          020p");
  public static final byte[] str_7_0008IBARAKI = CobolUtil.stringToBytes("0008IBARAKI HACHIRO     0050");
  public static final byte[] str_6_0007TOCHIGI = CobolUtil.stringToBytes("0007TOCHIGI SHICHIRO    010p");
  public static final byte[] str_5_0006FUKUSHIMA = CobolUtil.stringToBytes("0006FUKUSHIMA RIKURO    0150");
  public static final byte[] str_4_0005MIYAGI = CobolUtil.stringToBytes("0005MIYAGI GORO         020p");
  public static final byte[] str_3_0004IWATE = CobolUtil.stringToBytes("0004IWATE SHIRO         025p");
  public static final byte[] str_2_0003AKITA = CobolUtil.stringToBytes("0003AKITA SABURO        0300");
  public static final byte[] str_1_0002AOMORI = CobolUtil.stringToBytes("0002AOMORI JIRO         0350");
  public static final byte[] str_0_0001HOKKAI = CobolUtil.stringToBytes("0001HOKKAI TARO         0400");

  /* Sections and Labels */
  private final static int l_INSERTTBL = 1;
  private final static int l_MAIN_SECTION = 2;
  private final static int l_MAIN_SECTION__MAIN_RTN = 3;
  private final static int l_MAIN_SECTION__ERROR_RTN = 4;
  private final static int l_Default_Error_Handler = 5;

  private CobolRunnable call_OCESQLDisconnect = null;
  private CobolRunnable call_OCESQLEndSQL = null;
  private CobolRunnable call_OCESQLExecParams = null;
  private CobolRunnable call_OCESQLSetSQLParams = null;
  private CobolRunnable call_OCESQLStartSQL = null;
  private CobolRunnable call_OCESQLExec = null;
  private CobolRunnable call_OCESQLConnect = null;
}
